data[10:20,]
data$coppock = (10/55*data$ROC+9/55*data$ROCl1+8/55*data$ROCl2
+7/55*data$ROCl3+6/55*data$ROCl4+5/55*data$ROCl5
+4/55*data$ROCl6+3/55*data$ROCl7+2/55*data$ROCl8
+1/55*data$ROCl9)
data[10:20,]
data[20:30,]
sp500$ROClags = as.numeric(lag(as.zoo(sp500$ROC), 1:9, na.pad=TRUE))
lags = lag(sp500$ROC, 1:9)
lags
rm(lags)
lags = lag(sp500$ROC, 1:9)
lags
sp500$ROCl1 = lag(sp500$ROC, 1)
data = sp500
data[20:30,]
sp500$ROCl1 = lag(sp500$ROC,k=-1)
data = sp500
data[20:30,]
sp500$ROCl1 = lag(sp500$ROC,k=1)
data = sp500
data[20:30,]
sp500$ROCl1 = lag(sp500$ROC,k=1,na.pad=TRUE)
data = sp500
data[20:30,]
sp500$ROCl1 = lag(as.zoo(sp500$ROC),k=1,na.pad=TRUE)
data = sp500
data[20:30,]
p500$ROCl2 = lag(as.zoo(sp500$ROC), -2,na.pad=TRUE)
sp500$ROCl3 = lag(as.zoo(sp500$ROC), -3,na.pad=TRUE)
sp500$ROCl4 = lag(as.zoo(sp500$ROC), -4,na.pad=TRUE)
sp500$ROCl5 = lag(as.zoo(sp500$ROC), -5,na.pad=TRUE)
sp500$ROCl6 = lag(as.zoo(sp500$ROC), -6,na.pad=TRUE)
sp500$ROCl7 = lag(as.zoo(sp500$ROC), -7,na.pad=TRUE)
sp500$ROCl8 = lag(as.zoo(sp500$ROC), -8,na.pad=TRUE)
sp500$ROCl9 = lag(as.zoo(sp500$ROC), -9,na.pad=TRUE)
sp500$ROCl2 = lag(as.zoo(sp500$ROC), -2,na.pad=TRUE)
data$coppock = (10/55*data$ROC+9/55*data$ROCl1+8/55*data$ROCl2
+7/55*data$ROCl3+6/55*data$ROCl4+5/55*data$ROCl5
+4/55*data$ROCl6+3/55*data$ROCl7+2/55*data$ROCl8
+1/55*data$ROCl9)
summary(data$coppock)
class(data)
plot(data$Date, data$coppock, type = "l")
abline(a=0, b=0)
data[20:30,]
sp500$ROCl1 = lag(as.zoo(sp500$ROC),k=1,na.pad=TRUE)
sp500$ROCl2 = lag(as.zoo(sp500$ROC), k=-2,na.pad=TRUE)
sp500$ROCl3 = lag(as.zoo(sp500$ROC), k=-3,na.pad=TRUE)
sp500$ROCl4 = lag(as.zoo(sp500$ROC), k=-4,na.pad=TRUE)
sp500$ROCl5 = lag(as.zoo(sp500$ROC), k=-5,na.pad=TRUE)
sp500$ROCl6 = lag(as.zoo(sp500$ROC), k=-6,na.pad=TRUE)
sp500$ROCl7 = lag(as.zoo(sp500$ROC), k=-7,na.pad=TRUE)
sp500$ROCl8 = lag(as.zoo(sp500$ROC), k=-8,na.pad=TRUE)
sp500$ROCl9 = lag(as.zoo(sp500$ROC), k=-9,na.pad=TRUE)
str(sp500)
data = sp500
data[20:30,]
data$coppock = (10/55*data$ROC+9/55*data$ROCl1+8/55*data$ROCl2
+7/55*data$ROCl3+6/55*data$ROCl4+5/55*data$ROCl5
+4/55*data$ROCl6+3/55*data$ROCl7+2/55*data$ROCl8
+1/55*data$ROCl9)
summary(data$coppock)
class(data)
plot(data$Date, data$coppock, type = "l")
abline(a=0, b=0)
coppock[] = NULL
coppock = NULL
plot(sp500$Date, sp500$ROC, type = "l")
sp500$ROCl1 = lag(as.zoo(sp500$ROC),k=-1,na.pad=TRUE)
sp500$ROCl2 = lag(as.zoo(sp500$ROC), k=-2,na.pad=TRUE)
sp500$ROCl3 = lag(as.zoo(sp500$ROC), k=-3,na.pad=TRUE)
sp500$ROCl4 = lag(as.zoo(sp500$ROC), k=-4,na.pad=TRUE)
sp500$ROCl5 = lag(as.zoo(sp500$ROC), k=-5,na.pad=TRUE)
sp500$ROCl6 = lag(as.zoo(sp500$ROC), k=-6,na.pad=TRUE)
sp500$ROCl7 = lag(as.zoo(sp500$ROC), k=-7,na.pad=TRUE)
sp500$ROCl8 = lag(as.zoo(sp500$ROC), k=-8,na.pad=TRUE)
sp500$ROCl9 = lag(as.zoo(sp500$ROC), k=-9,na.pad=TRUE)
data = sp500
data[30:40,]
data$coppock = (10/55*data$ROC+9/55*data$ROCl1+8/55*data$ROCl2
+7/55*data$ROCl3+6/55*data$ROCl4+5/55*data$ROCl5
+4/55*data$ROCl6+3/55*data$ROCl7+2/55*data$ROCl8
+1/55*data$ROCl9)
summary(data$coppock)
class(data)
plot(data$Date, data$coppock, type = "l")
abline(a=0, b=0)
ibrary(quantmod) # also loads TTR, xts, and zoo
install.packages("quantmod")
ibrary(quantmod) # also loads TTR, xts, and zoo
library(quantmod) # also loads TTR, xts, and zoo
# download data from Yahoo Finance
sp500 <- getSymbols("^GSPC", auto.assign=FALSE)
# convert to monthly
sp500m <- to.monthly(sp500)
# add lags (via $<-, like you claimed couldn't be done)
sp500m$lag11 <- ROC(Ad(sp500m), n=11, type="discrete")
sp500m$lag14 <- ROC(Ad(sp500m), n=14, type="discrete")
# calculate Coppock Curve
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(9:1)/55)
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
plot(sp500m$Coppock, Date, type = "l")
head(sp500m)
sp500m = read.csv(file="/Users/elliottmiddleton/Documents/R/sp500.csv",header=TRUE,
colClasses=c("Date","numeric","numeric","numeric","numeric"))
sp500m$lag11 <- ROC(Ad(sp500m), n=11, type="discrete")
sp500m$lag14 <- ROC(Ad(sp500m), n=14, type="discrete")
sp500m$lag11 <- ROC(sp500m$sp500, n=11, type="discrete")
sp500m$lag14 <- ROC(sp500m$sp500, n=14, type="discrete")
# calculate Coppock Curve
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
plot(sp500m$Coppock, Date, type = "l")
plot(sp500m$Coppock, sp500m$Date, type = "l")
head(sp500m)
plot(sp500m$Date, sp500m$Coppock, type = "l")
abline(a=0, b=0)
getSymbols("^GSPC", env = sp500, src = "yahoo",
+            from = as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",
+            from = as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",
+            from  as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",
+            from =  as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",
+            from = as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",
+            from = as.Date("1950-01-04"), to = as.Date("2015-07-29"))
getSymbols("^GSPC", env = sp500new, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
sp500new = NULL
getSymbols("^GSPC", env = sp500new, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
head(sp500new)
str(sp500new)
sp500new = NULL
getSymbols("^GSPC", env = sp500new, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
str(sp500new)
getSymbols("^GSPC", env = sp500, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
str(sp500new)
str(sp500)
sp500 <- getSymbols("^GSPC", auto.assign=FALSE)
str(sp500)
getSymbols("^GSPC", env = sp500, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
sp500m <- to.monthly(sp500)
sp500m$lag11 <- ROC(sp500m$sp500, n=11, type="discrete")
sp500m$lag14 <- ROC(sp500m$sp500, n=14, type="discrete")
getSymbols("^GSPC", env = sp500, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
sp500m <- to.monthly(sp500)
sp500m$lag11 <- ROC(sp500m$sp500, n=11, type="discrete")
sp500m$lag14 <- ROC(sp500m$sp500, n=14, type="discrete")
str(sp500m)
sp500m$lag11 <- ROC(Ad(sp500m), n=11, type="discrete")
sp500m$lag14 <- ROC(Ad(sp500m), n=14, type="discrete")
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
plot(sp500m$Date, sp500m$Coppock, type = "l")
abline(a=0, b=0)
plot(sp500m$Date, sp500m$Coppock, type = "l")
sp500m = complete.cases(sp500m)
plot(sp500m$Date, sp500m$Coppock, type = "l")
sp500m = complete.cases(sp500m)
plot(sp500m$Date, sp500m$Coppock, type = "l")
head(sp500m)
getSymbols("^GSPC", env = sp500, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
str(sp500)
sp500m <- to.monthly(sp500)
str(sp500m)
sp500m$lag11 <- ROC(Ad(sp500m), n=11, type="discrete")
sp500m$lag14 <- ROC(Ad(sp500m), n=14, type="discrete")
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
sp500m = na.omit(sp500me)
sp500m = na.omit(sp500m)
plot(sp500m$Date, sp500m$Coppock, type = "l")
sp500m[1:100,]
sp500m[1:50,]
getSymbols("^GSPC", env = sp500, src = "yahoo",from = as.Date("1950-01-04"),
to = as.Date("2015-07-29"))
sp500m <- to.monthly(sp500)
str(sp500m)
# add lags (via $<-, like you claimed couldn't be done)
sp500m$lag11 <- ROC(Ad(sp500m), n=11, type="discrete")
sp500m$lag14 <- ROC(Ad(sp500m), n=14, type="discrete")
# calculate Coppock Curve
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
plot(sp500m$Date, sp500m$Coppock, type = "l")
sp500m = read.csv(file="/Users/elliottmiddleton/Documents/R/sp500.csv",header=TRUE,
colClasses=c("Date","numeric","numeric","numeric","numeric"))
sp500m$lag11 <- ROC((sp500m$sp500), n=11, type="discrete")
sp500m$lag14 <- ROC((sp500m$sp500), n=14, type="discrete")
sp500m$Coppock <- WMA(sp500m$lag11 + sp500m$lag14, n=10, wts=(10:1)/55)
plot(sp500m$Date, sp500m$Coppock, type = "l")
abline(a=0, b=0)
attach(faithful)
plot(faithful)
plot(faithful, hlab="x")
?plot
plot(faithful, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2)
plot(faithful, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser Eruption Data")
main="Old Faithful Geyser/n Eruption Data")
plot(faithful, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser /n Eruption Data")
plot(faithful, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline=(h=3.2, col="green")
abline=(h=3.2, col = "green")
abline=(h = 3.2, col = "green")
abline(h = 3.2, col = "green")
plot(faithful, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline(h = 3.2, col = "green")
head(faithful)
plot(faithful, x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline(h = 3.2, col = "green")
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline(h = 3.2, col = "green")
?last.warning
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data", las = 4)
par(las)
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
par(las=3)
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline(h = 3.2, col = "green")
par(las=2)
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data")
abline(h = 3.2, col = "green")
par(mar=(3,3,4,4))
par(bg="lightgray")
par(mar=(4,4,3,3))
par(mar=c(4,4,3,3))
par(bg="lightgray")
plot(x=waiting, y=eruptions, xlab="Waiting time in minutes", ylab="Eruption time in minutes", pch=2,
main="Old Faithful Geyser \n Eruption Data", bty="n", cex=0.65)
abline(h = 3.2, col = "green", lwd=2, lty=4)
abline(h = 3.2, col = "green", lwd=4, lty=4)
abline(h = 3.2, col = "forestgreen", lwd=4, lty=4)
par(mfrow=c(2,1))
par(mar=c(4,4,2,1)
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
attach(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
par(mfrow=c(2,1))
par(mar=c(4,4,2,1)
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
par(mar=c(4,4,3,3)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
par(mfrow=c(2,1))
par(mar=c(4,4,3,3)
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
par(mar=c(4,4,1,1)
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
par(mfrow=c(2,1))
par(mar=c(4,4,1,1)
attach(quakes)
par(mfrow=c(2,1))
par(mar=c(4,4,2,1)
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
par(mar=c(4,4,2,1))
attach(quakes)
head(quakes)
hist(mag,main="Richter Magnitude", ylab="", xlab="", breaks=11)
hist(depth, main="Depth in km", ylab="", xlab="", breaks=12)
library(ggplot2)
attach(diamonds)
par(mfrow=c(1,1))
boxplot(price~clarity)
boxplot(price~clarity, hor=T, notch=T)
boxplot(price~clarity, horizontal=T, notch=T)
boxplot(price~clarity, horizontal=T, notch=T, cex.axis=0.5, cex.main=0.85)
boxplot(price~clarity, horizontal=T, notch=T, cex.axis=0.5, cex.main=0.85,
main="Price vs. clarity", xlab="Price in USD", ylab="Clarity")
boxplot(price~clarity, horizontal=T, notch=T, cex.axis=0.5, cex.main=0.85,
main="Price vs. clarity", xlab="Price in USD", ylab="Clarity",
cex=065, cex.lab=0.7)
boxplot(price~clarity, horizontal=T, notch=T, cex.axis=0.5, cex.main=0.85,
main="Price vs. clarity", xlab="Price in USD", ylab="Clarity",
cex=0.65, cex.lab=0.7)
library(plotrix)
set.seed(123)
Nationality = sample(c("US","UK", ""))
ourdata = data.frame(
Age = rnorm(500, 30, 10),
Sex = sample(c("M","F"), 500, T),
Nationality = sample(c("US","UK", "EU"))
)
ourdata = data.frame(
Age = rnorm(500, 30, 10),
Sex = sample(c("M","F"), 500, T),
Nationality = sample(c("US","UK", "EU"), 500, T)
)
barNest(Age~Sex+Nationality, data=ourdata)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "nnet", "nortest", "Rcpp", "rpart", "spatial", "survival"))
setwd("~/Documents/machine learning")
data = read.csv(file="/Users/elliottmiddleton/Documents/R/machine learning/pml-training.csv",header=TRUE,
colClasses=c("Date","numeric","numeric","numeric","numeric"))
data = read.csv(file="/Users/elliottmiddleton/Documents/R/machineLearning/pml-training.csv",header=TRUE,
colClasses=c("Date","numeric","numeric","numeric","numeric"))
data = read.csv(file="/Users/elliottmiddleton/Documents/machineLearning/pml-training.csv",header=TRUE,
colClasses=c("Date","numeric","numeric","numeric","numeric"))
data = read.csv(file="/Users/elliottmiddleton/Documents/machineLearning/pml-training.csv",header=TRUE)
str(data)
completes = complete.cases(data)
str(completes)
completes = colbind(complete.cases(data),datq))
completes = colbind(complete.cases(data),data)
completes = cbind(complete.cases(data),data)
completes = completes(complete == "TRUE")
head(completes)
completes = completes(complete.cases(data) == "TRUE")
completes = complete.cases(data) == "TRUE"
head(completes)
completes = [complete.cases(data)]
completes = data[complete.cases(data),]
head(completes)
str(completes)
dim(completes)
str(completes)
data = read.csv(file="/Users/elliottmiddleton/Documents/machineLearning/pml-training.csv",header=TRUE)
str(data)
pmltraining <- read.csv("~/Documents/machineLearning/pml-training.csv")
View(pmltraining)
completes = cbind(complete.cases(pmltraining),data)
completes = [complete.cases(pmltraining),]
completes = PMLTRAINING[complete.cases(pmltraining),]
completes = pmltraining[complete.cases(pmltraining),]
head(completes)
dim(completes)
View(completes)
View(completes)
source('~/.active-rstudio-document')
library(tidyr)
cleanup = function(xxx) {
sum(is.na(xxx))
}
out = sapply(cleanup(pmltraining)
head(out)
out = sapply(cleanup(pmltraining))
cleanup = function(xxx) {
sum(is.na(xxx))
}
out = sapply(cleanup(pmltraining))
out = sapply(cleanup(pmltraining,))
cleanup(pmltraining,)
View(pmltraining)
View(pmltraining)
cleanup = function(xxx) {
gsub(is.na(xxx),"")
}
cleanup(pmltraining[,])
cleanup(pmltraining)
pml.training <- read.csv("~/Documents/machineLearning/pml-training.csv", header=FALSE, na.strings="\x0C\"")
View(pml.training)
pml.training.names = pml.training[1,]
pml.training.names
training = pml.training[2:.,]
training = pml.training[2:nrow(pml.training),]
head(training)
nas = sapply(is.na(training[,]))
nas = sapply(is.na(training[,8:159]))
is.na(training[,8:159]
x = is.na(training[,8:159]
xx = is.na(training[,8:159]
xx
completes = complete.cases(training)
str(completes)
dim(completes)
length(completes)
length(completes == "TRUE")
str(completes)
length(completes == "FALSE")
completes = na.omit(training)
dim(completes)
pml.training <- read.csv("~/Documents/machineLearning/pml-training.csv", header=FALSE)
View(pml.training)
pml.training.names = pml.training[1,]
training = pml.training[2:nrow(pml.training),]
completes = na.omit(training)
dim(completes)
bads = sum(is.na(training[,]))
bads
clean = function(df) {
for (i in 1:160) {
sum(is.na(df[,i])) }
}
clean(training)
x =clean(training)
x
clean = function(df) {
for (i in 1:160) {
print (sum(is.na(df[,i])) )}
}
x = clean(training)
clean = function(df) {
for (i in 1:160) {
print(i, (sum(is.na(df[,i]))) )}
}
x = clean(training)
for (i in 1:160) {
print(i, (sum(is.na(training[,i]))) )}
print((sum(is.na(training[,i]))) )}
for (i in 1:160) {
print((sum(is.na(training[,i]))) )}
for (i in 1:160) {
print(i, sum(is.na(training[,i])) )}
for (i in 1:160) {
print(i, sum(is.na(training[,i])))}
for (i in 1:160) {
print(i, sum(is.na(training[,i])))}
?print
for (i in 1:160) {
print(i); print( sum(is.na(training[,i])))}
dim(completes)
completes
pml.training <- read.csv("~/Documents/machineLearning/pml-training.csv", header=FALSE)
View(pml.training)
pml.training.names = pml.training[1,]
pml.training.names
training = pml.training[2:nrow(pml.training),]
head(training)
completes = na.omit(training)
dim(completes)
for (i in 1:160) {
if ( sum(is.na(df[,i]) > 19000) print i   }
for (i in 1:160) {
if ( sum(is.na(df[,i]) > 19000) print(i)   }
for (i in 1:160) {
if ( sum(is.na(training[,i]) > 19000) print(i)   }
for (i in 1:160) {
sum(is.na(training[,i]) }
for (i in 1:160) {
print sum(is.na(training[,i]) }
for (i in 1:160) {
print(i);print() sum(is.na(training[,i])) }
for (i in 1:160) {
print(i);print( sum(is.na(training[,i])) }
for (i in 1:160) {
print(i)
print( sum(is.na(training[,i])) }
for (i in 1:160) {
print(i)
print( sum(is.na(training[,i]))) }
completes = na.omit(training)
dim(completes)
completes = training(complete.cases(training),)
completes = training[complete.cases(training),]
dim(completes)
library(randomForest)
library(randomforest)
install.packages("randomForest")
library(randomforest)
library(randomForest)
fit <- randomForest(v160 ~ .,   data=training)
fit <- randomForest(training$v160 ~ .,   data=training)
install.packages("dummies")
library(dummies)
dummy(training$v160)
str(training)
for (i in 9:159) {
training$i = as.numeric(training$i)
}
for (i in 9:159) {
nam <- paste("training$V", i, sep = "")
nam = as.numeric(nam)
}
warnings()
head(training)
for (i in 9:159) {
nam <- paste("completes$V", i, sep = "")
nam = as.numeric(nam)
}
head(completes)
dummy(training$v160)
dummy(training$V160)
head(training)
dep = dummy(training$V160)
dep
head(dep)
fit <- randomForest(dep ~ .,   data=training)
dep = as.matrix(dummy(training$V160))
dep
head(dep)
fit <- randomForest(dep ~ .,   data=training)
head(training)
View(training)
View(training)
